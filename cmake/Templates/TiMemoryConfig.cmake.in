
include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@ConfigVersion.cmake)

@PACKAGE_INIT@

#------------------------------------------------------------------------------#
#   Settings
#------------------------------------------------------------------------------#
set(TIMEMORY_USE_MPI @MPI_FOUND@)
set(TIMEMORY_EXCEPTIONS @TIMEMORY_EXCEPTIONS@)
set(TIMEMORY_PYTHON_BINDINGS @TIMEMORY_USE_PYTHON_BINDING@)
if(NOT DEFINED @PROJECT_NAME@_DIR)
    set(@PROJECT_NAME@_DIR ${CMAKE_CURRENT_LIST_DIR})
endif(NOT DEFINED @PROJECT_NAME@_DIR)

set(@PROJECT_NAME@_C_FLAGS @TiMemory_C_FLAGS@)
set(@PROJECT_NAME@_CXX_FLAGS @TiMemory_CXX_FLAGS@)
set(@PROJECT_NAME@_C_COMPILE_OPTIONS @TiMemory_C_FLAGS@)
set(@PROJECT_NAME@_CXX_COMPILE_OPTIONS @TiMemory_CXX_FLAGS@)

#------------------------------------------------------------------------------#
#   Determine install tree or build tree
#------------------------------------------------------------------------------#
set(_TIMEMORY_INSTALL_TREE ON)
if("${CMAKE_SOURCE_DIR}" STREQUAL "@CMAKE_SOURCE_DIR@")
    set(_TIMEMORY_INSTALL_TREE OFF) # build tree
endif()

if(_TIMEMORY_INSTALL_TREE)

    set_and_check(@PROJECT_NAME@_INCLUDE_DIR "@PACKAGE_INCLUDE_INSTALL_DIR@")
    set_and_check(@PROJECT_NAME@_LIB_DIR "@PACKAGE_LIB_INSTALL_DIR@")
    get_filename_component(@PROJECT_NAME@_ROOT_DIR ${@PROJECT_NAME@_INCLUDE_DIR} PATH)

    if(@TIMEMORY_USE_PYTHON_BINDING@)
        set(@PROJECT_NAME@_PYTHON_DIR "@PACKAGE_PYTHON_INSTALL_DIR@")
        if(NOT EXISTS ${@PROJECT_NAME@_PYTHON_DIR})
            find_package(PythonInterp QUIET)
            if(PYTHONINTERP_FOUND)
                execute_process(COMMAND
                    ${PYTHON_EXECUTABLE} -c "import site; print(site.getsitepackages()[0])"
                    OUTPUT_VARIABLE @PROJECT_NAME@_PYTHON_DIR
                    OUTPUT_STRIP_TRAILING_WHITESPACE
                    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR})
            endif()
        endif()
    endif()

    foreach(_TYPE LIB INCLUDE PYTHON)
        set(@PROJECT_NAME@_${_TYPE}_DIRS ${@PROJECT_NAME@_${_TYPE}_DIR})
    endforeach()

    include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@LibraryDepends.cmake)
    check_required_components(@PROJECT_NAME@)

    #--------------------------------------------------------------------------#
    #   try to get imported location
    #--------------------------------------------------------------------------#

    string(TOUPPER "${CMAKE_BUILD_TYPE}" _BUILD_TYPE)
    if("${CMAKE_BUILD_TYPE}" MATCHES "${CMAKE_CONFIGURATION_TYPES}")
        set(IMPORTED_LOCATION_BUILD IMPORTED_LOCATION_${_BUILD_TYPE})
    else()
        set(IMPORTED_LOCATION_BUILD )
    endif()

    set(LOCATIONS IMPORTED_LOCATION
        ${IMPORTED_LOCATION_BUILD}
        IMPORTED_LOCATION_RELEASE
        IMPORTED_LOCATION_RELWITHDEBINFO
        IMPORTED_LOCATION_DEBUG
        IMPORTED_LOCATION_MINSIZEREL)

    foreach(_LANG C CXX)
        string(TOLOWER "${_LANG}" _LANG_LOWER)
        foreach(_LOC ${LOCATIONS})
            if(NOT _${_LANG}_LOCATION)
                get_target_property(_${_LANG}_LOCATION @LIBNAME@-${_LANG_LOWER}-library ${_LOC})
            endif(NOT _${_LANG}_LOCATION)
        endforeach()

        if(_${_LANG}_LOCATION)
            set(@PROJECT_NAME@_${_LANG}_LIBRARY ${_${_LANG}_LOCATION}
                CACHE INTERNAL "@PROJECT_NAME@ ${_LANG} library")
        endif(_${_LANG}_LOCATION)

        unset(_${_LANG}_LOCATION)
    endforeach()

else() # build tree

    set(@PROJECT_NAME@_ROOT_DIR "@PROJECT_BINARY_DIR@")
    set(@PROJECT_NAME@_INCLUDE_DIR "@PROJECT_SOURCE_DIR@/source"
        "@PROJECT_SOURCE_DIR@/source/cereal/include")

    if(TIMEMORY_PYTHON_BINDINGS)
        list(APPEND @PROJECT_NAME@_INCLUDE_DIR "@PROJECT_SOURCE_DIR@/source/python/pybind11")
    endif(TIMEMORY_PYTHON_BINDINGS)

    set(@PROJECT_NAME@_LIB_DIR "@PROJECT_BINARY_DIR@")

    if(TIMEMORY_PYTHON_BINDINGS)
        set(@PROJECT_NAME@_PYTHON_DIR "@PROJECT_BINARY_DIR@")
    endif(TIMEMORY_PYTHON_BINDINGS)

    set_property(TARGET @LIBNAME@-c-library
        PROPERTY IMPORTED_LOCATION "${CMAKE_BINARY_DIR}/TiMemoryBuild.cmake")

    set_property(TARGET @LIBNAME@-cxx-library
        PROPERTY IMPORTED_LOCATION "${CMAKE_BINARY_DIR}/TiMemoryBuild.cmake")

    set(PROJECT_DEPENDS @LIBNAME@-c-library @LIBNAME@-cxx-library)

endif()

set(@PROJECT_NAME@_INCLUDE_DIRS SYSTEM ${@PROJECT_NAME@_INCLUDE_DIR})
set(@PROJECT_NAME@_EXTERNAL_INCLUDE_DIRS "@EXTERNAL_INCLUDE_DIRS@")
foreach(_DIR ${@PROJECT_NAME@_EXTERNAL_INCLUDE_DIRS})
    list(APPEND @PROJECT_NAME@_INCLUDE_DIRS SYSTEM ${_DIR})
endforeach(_DIR ${@PROJECT_NAME@_EXTERNAL_INCLUDE_DIRS})

#------------------------------------------------------------------------------#
#   CXX standard
#------------------------------------------------------------------------------#
set(@PROJECT_NAME@_CXX_STANDARD @CMAKE_CXX_STANDARD@)
set(@PROJECT_NAME@_CXX_STANDARD_REQUIRED @CMAKE_CXX_STANDARD_REQUIRED@)

#------------------------------------------------------------------------------#
#   Definitions
#------------------------------------------------------------------------------#
set(@PROJECT_NAME@_DEFINITIONS @TiMemory_DEFINITIONS@)
if(NOT @BUILD_SHARED_LIBS@ AND WIN32)
    list(APPEND @PROJECT_NAME@_DEFINITIONS _TIMEMORY_ARCHIVE)
endif()

#------------------------------------------------------------------------------#
#   TiMemory link target
#------------------------------------------------------------------------------#
set(@PROJECT_NAME@_C_LIBRARIES @LIBNAME@-c-library)
set(@PROJECT_NAME@_CXX_LIBRARIES @LIBNAME@-cxx-library)
set(@PROJECT_NAME@_LIBRARIES @LIBNAME@-cxx-library)


#------------------------------------------------------------------------------#
#   find_package variables
#------------------------------------------------------------------------------#
include(FindPackageHandleStandardArgs)
# handle the QUIETLY and REQUIRED arguments and set TiMemory_FOUND to TRUE
# if all listed variables are TRUE
find_package_handle_standard_args(@PROJECT_NAME@ DEFAULT_MSG
    @PROJECT_NAME@_ROOT_DIR
    @PROJECT_NAME@_INCLUDE_DIRS
    @PROJECT_NAME@_LIBRARIES
    @PROJECT_NAME@_C_LIBRARIES
    @PROJECT_NAME@_CXX_LIBRARIES)

if(APPLE)
    set(CMAKE_INCLUDE_SYSTEM_FLAG_${LANG} "-isystem ")
endif(APPLE)
