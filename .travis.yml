# TiMEemory Travis CI file

language: python


# The apt packages here install our compiled code dependencies.
matrix:
  include:
    # ------------------------------------------------------------------------ #
    #
    #   Python 2.7
    #
    # ------------------------------------------------------------------------ #
    # GCC 4.9
    - os: linux
      dist: xenial
      sudo: false
      python: '2.7'
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-4.9
            - g++-4.9
            - build-essential
            - cmake
            - libpapi-dev
            - papi-tools
      env:
        - MATRIX_EVAL="CC=$(which gcc-4.9) && CXX=$(which g++-4.9) && BUILD_TYPE=Debug && BUILD_SHARED=OFF"
    # GCC 5
    - os: linux
      dist: xenial
      sudo: false
      python: '2.7'
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-5
            - g++-5
            - build-essential
            - cmake
            - libopenmpi-dev
            - openmpi-bin
            - libpapi-dev
            - papi-tools
      env:
        - MATRIX_EVAL="CC=$(which gcc-5) && CXX=$(which g++-5) && BUILD_TYPE=MinSizeRel && BUILD_SHARED=ON"
    # GCC 6
    - os: linux
      dist: xenial
      sudo: false
      python: '2.7'
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - g++-6
            - build-essential
            - cmake
            - libopenmpi-dev
            - openmpi-bin
            - libpapi-dev
            - papi-tools
      env:
        - MATRIX_EVAL="CC=$(which gcc-6) && CXX=$(which g++-6) && BUILD_TYPE=RelWithDebInfo && BUILD_SHARED=OFF"
    # GCC 7
    - os: linux
      dist: xenial
      sudo: false
      python: '2.7'
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-7
            - g++-7
            - build-essential
            - cmake
            - libopenmpi-dev
            - openmpi-bin
            - libpapi-dev
            - papi-tools
      env:
        - MATRIX_EVAL="CC=$(which gcc-7) && CXX=$(which g++-7) && BUILD_TYPE=Release && BUILD_SHARED=ON"
    # Clang 4.0
    - os: linux
      dist: xenial
      sudo: false
      python: '2.7'
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-4.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-4.0
            - clang++-4.0
            - build-essential
            - cmake
            - libopenmpi-dev
            - openmpi-bin
            - libpapi-dev
            - papi-tools
      env:
        - MATRIX_EVAL="CC=$(which clang-4.0) && CXX=$(which clang++-4.0) && BUILD_TYPE=Debug && BUILD_SHARED=OFF"
    # Clang 5.0
    - os: linux
      dist: xenial
      sudo: false
      python: '2.7'
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-5.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-5.0
            - clang++-5.0
            - build-essential
            - cmake
            - libopenmpi-dev
            - openmpi-bin
            - libpapi-dev
            - papi-tools
      env:
        - MATRIX_EVAL="CC=$(which clang-5.0) && CXX=$(which clang++-5.0) && BUILD_TYPE=MinSizeRel && BUILD_SHARED=ON"
    # ------------------------------------------------------------------------ #
    #
    #   Python 3.6
    #
    # ------------------------------------------------------------------------ #
    # GCC 4.9
    - os: linux
      dist: xenial
      sudo: false
      python: '3.6'
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-4.9
            - g++-4.9
            - build-essential
            - cmake
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
      env:
        - MATRIX_EVAL="CC=$(which gcc-4.9) && CXX=$(which g++-4.9) && BUILD_TYPE=RelWithDebInfo && BUILD_SHARED=ON"
    # GCC 5
    - os: linux
      dist: xenial
      sudo: false
      python: '3.6'
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-5
            - g++-5
            - build-essential
            - cmake
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
      env:
        - MATRIX_EVAL="CC=$(which gcc-5) && CXX=$(which g++-5) && BUILD_TYPE=Release && BUILD_SHARED=OFF"
    # GCC 6
    - os: linux
      dist: xenial
      sudo: false
      python: '3.6'
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - g++-6
            - build-essential
            - cmake
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
      env:
        - MATRIX_EVAL="CC=$(which gcc-6) && CXX=$(which g++-6) && BUILD_TYPE=Debug && BUILD_SHARED=ON"
    # GCC 7
    - os: linux
      dist: xenial
      sudo: false
      python: '3.6'
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-7
            - g++-7
            - build-essential
            - cmake
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
      env:
        - MATRIX_EVAL="CC=$(which gcc-7) && CXX=$(which g++-7) && BUILD_TYPE=MinSizeRel && BUILD_SHARED=OFF"
    # Clang 4.0
    - os: linux
      dist: xenial
      sudo: false
      python: '3.6'
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-4.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-4.0
            - clang++-4.0
            - build-essential
            - cmake
            - libpapi-dev
            - papi-tools
      env:
        - MATRIX_EVAL="CC=$(which clang-4.0) && CXX=$(which clang++-4.0) && BUILD_TYPE=RelWithDebInfo && BUILD_SHARED=ON"
    # Clang 5.0
    - os: linux
      dist: xenial
      sudo: false
      python: '3.6'
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-5.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-5.0
            - clang++-5.0
            - build-essential
            - cmake
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
      env:
        - MATRIX_EVAL="CC=$(which clang-5.0) && CXX=$(which clang++-5.0) && BUILD_TYPE=Release && BUILD_SHARED=OFF"
    # ------------------------------------------------------------------------ #


before_install:
    - eval "${MATRIX_EVAL}"
    - export CC=${CC}
    - export CXX=${CXX}
    - export PYBINPATH=$(dirname $(which python))
    - export PYROOTPATH=$(dirname ${PYBINPATH})
    - export PATH=${PYBINPATH}:${PATH}
    - export CMAKE_PREFIX_PATH=${PYROOTPATH}:${CMAKE_PREFIX_PATH}
    - export PYTHON_VERSION="$(python --version | awk '{print $NF}')"
    - echo "CC = ${CC} $(${CC} -dumpversion)"
    - echo "CXX = ${CXX} $(${CXX} -dumpversion)"
    - echo "Python = $(which python) [version ${PYTHON_VERSION}]"
    - echo "PYBINPATH = ${PYBINPATH}"
    - echo "PYROOTPATH = ${PYROOTPATH}"
    - echo "CMAKE_PREFIX_PATH = ${CMAKE_PREFIX_PATH}"
    - export INSTALL_DIR=${HOME}/timemory/current
    - export USE_MPI=$(if [ ! -z "$(which mpicc)" ]; then echo "ON"; else echo "OFF"; fi)


install:
    - env
    - echo "--> ${PWD}"
    - export SOURCE_DIR=${PWD}
    - export TIMEMORY_VERBOSE=4
    - export TIMEMORY_OUTPUT_TOTAL=1
    #- pip install -U -r requirements.txt
    - mkdir -p build-timemory
    - cd build-timemory
    - export BUILD_DIR=${PWD}
    - echo "CC = ${CC} $(${CC} -dumpversion)"
    - echo "CXX = ${CXX} $(${CXX} -dumpversion)"
    - echo "--> ${PWD}"
    - cmake
        -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR}
        -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
        -DCMAKE_C_COMPILER=${CC}
        -DCMAKE_CXX_COMPILER=${CXX}
        -DCTEST_SITE=Travis
        -DCTEST_MODEL=Continuous
        -DCTEST_LOCAL_CHECKOUT=ON
        -DPYTHON_EXECUTABLE=$(which python)
        -DTIMEMORY_USE_MPI=${USE_MPI}
        -DTIMEMORY_BUILD_TESTING=ON
        -DTIMEMORY_USE_PYTHON_BINDING=OFF
        -DTIMEMORY_USE_PAPI=ON
        -DBUILD_SHARED_LIBS=${BUILD_SHARED}
        ${PWD}/..
    - grep '^[A-Za-z]' CMakeCache.txt | grep -vi advanced
    - ctest -S cdash/Stages.cmake -DSTAGES="Build;Test" -DTRIGGER=Test -V --output-on-failure
    #
    # Python testing
    #
    - cd ${SOURCE_DIR}
    #- pip install .


script:
    #
    # Python testing
    #
    #- mkdir -p ${HOME}/timemory-test
    # go to empty directory for testing
    #- cd ${HOME}/timemory-test
    #- python${TRAVIS_PYTHON_VERSION} -c "import timemory ; timemory.tests.run()"
    - echo "python${TRAVIS_PYTHON_VERSION} testing -- Done"
